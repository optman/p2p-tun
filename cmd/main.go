package cmd

import (
	"io"
	stlog "log"
	"os"

	"github.com/optman/p2p-tun/auth"
	"github.com/optman/p2p-tun/cmd/context"
	"github.com/optman/p2p-tun/host"

	logging "github.com/ipfs/go-log/v2"
	"github.com/libp2p/go-libp2p-core/crypto"
	"github.com/urfave/cli/v2"
)

var (
	log = logging.Logger("p2p-tun")
)

var Flags = []cli.Flag{
	&cli.StringFlag{
		Name:    "private-key",
		Usage:   "private key generated by genkey cmd",
		EnvVars: []string{"PRIVATE_KEY"},
	},
	&cli.StringSliceFlag{
		Name:  "listen-addrs",
		Usage: "p2p listen multiaddress",
		Value: cli.NewStringSlice("/ip4/0.0.0.0/udp/0/rndz/dns/rndz.optman.net/udp/8888", "/ip4/0.0.0.0/tcp/0/rndz/dns/rndz.optman.net/tcp/8888"),
	},
	&cli.StringFlag{
		Name:    "secret",
		Usage:   "authenticate user",
		Value:   "",
		EnvVars: []string{"SECRET"},
	},
	&cli.BoolFlag{
		Name:  "debug",
		Usage: "log debug",
	},
}

var Commands = []*cli.Command{
	ClientCmd(),
	ServerCmd(),
	GenkeyCmd(),
}

func common(c *cli.Context) error {

	privKeyStr := c.String("private-key")
	var privKey crypto.PrivKey
	var err error
	if len(privKeyStr) == 0 {
		privKey, err = genkey()
	} else {
		b, err := crypto.ConfigDecodeKey(privKeyStr)
		if err != nil {
			return err
		}
		privKey, err = crypto.UnmarshalPrivateKey(b)
	}

	if err != nil {
		return err
	}

	conf := &host.NodeConfig{
		PrivateKey:  privKey,
		ListenAddrs: c.StringSlice("listen-addrs"),
	}

	secret := c.String("secret")
	if len(secret) > 0 {
		conf.Auth = auth.NewAuthenticator(secret)
	}

	logLevel := "info"

	if c.Bool("debug") {
		logLevel = "debug"
		stlog.SetOutput(os.Stdout)
	} else {
		stlog.SetOutput(io.Discard)
	}

	logging.SetLogLevel("p2p-tun", logLevel)
	logging.SetLogLevel("rndz-tcp-tpt", logLevel)
	logging.SetLogLevel("rndz-quic-tpt", logLevel)

	c.Context = context.SetLogger(c.Context, log)
	c.Context = context.SetNodeConfig(c.Context, conf)

	return nil
}
